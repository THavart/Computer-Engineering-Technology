/* CST8221-JAP: LAB 01, Example 3
   File name: SimpleSwingGUIe3.java
*/
//using specific imports
import java.awt.EventQueue;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.BorderFactory;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 This is an example of how a typical GUI application should be coded.
 The application class extends JPanel not JFrame.
 By doing that the application can be deployed bot as an applet and a desktop application.
 The example shows how to change the default
 "Look and Feel" of a Swing GUI application.
 It shows how to change the standard text font.
 It shows how to attach mnemonics and tooltips to a button.
 It uses anonymous inner class to handle the button event.
 Pay attention how the main() method uses EventQueue.invokeLater() method.
 This is the standard way to run a GUI application.
 
 @author Svillen Ranev
 @version 1.17.1
 @since Java 5
*/
public class SimpleSwingGUIe3 extends JPanel {
    //default serial version ID - Swing components implement the Serializable interface 
    private static final long serialVersionUID = 1L;
    private JButton button_01;
    private JPanel pane;
    private JLabel label_01;
    private JLabel label_02;  
 
    private int clickCounter;
    private UIManager.LookAndFeelInfo []installedLF;
    private int lfCounter;
    private int  lfMaxNumber;
    
    private final static String FRAME_TITLE = "Simple Swing GUI - E3";
    private final String labelText = "Number of happy button clicks: ";
/**
  Default constructor. Sets the GUI.
*/    
  public SimpleSwingGUIe3(){
   initComponents();   
  }
    
  /**
   Sets the GUI.
   This method is called from within the constructor to initialize the GUI.
*/  private void initComponents(){
          //get available Look and Feels 
	  installedLF = UIManager.getInstalledLookAndFeels();
	  lfMaxNumber = installedLF.length-1;
	  // Create and set up containers and components.
	  button_01 = createButton("A Happy New Semester JButton");
          label_01 = new JLabel("Current Look and Feel: "+installedLF[0].getName());
          label_02 = new JLabel(labelText + "0");
	  pane = new JPanel();
	  // set a border around the JPanel
	  pane.setBorder(BorderFactory.createEmptyBorder(25, 25, 10, 25));
	  // change the default Layout Manager
	  // use GridLayout with 3 rows and 1 column
	  pane.setLayout(new GridLayout(3, 1));
          // Add components to JPanel container.
	  pane.add(label_01);
	  pane.add(button_01);
	  pane.add(label_02);
	  // Install JPanel as the content pane
          add(pane);   
	}
/**
   Creates a button and registers (adds) an ActionListener to process the events generated by the button.
   @param buttonName the button label.
   @return returns a created button.
*/   
   private JButton createButton(String buttonName){
     // Create a button 
	JButton  button = new JButton(buttonName);
     // Change the font size of the default font
        button.setFont(new Font(button.getFont().getName(), button.getFont().getStyle(), 20));//resize the font to size 20
     // Set a specific font
     //  button.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 16));
     //set the initial size of the component
     //in most cases it is better to leave to the UI Manager to determine the preferred size
        button.setPreferredSize(new Dimension(button.getText().length()*15,40));
   // Create a keyboard shortcut: Pressing ALT-I will act as a mouse click on the button	
	button.setMnemonic('i');
	// Create a Tool Tip. Will show up when the mouse hovers over the button
	button.setToolTipText("Please Click Me");
   
   // Handle the button clicks. Anonymous class is used to handle the events.
   // No need to check for the event source anymore.
   // Now each individual button will be responsible to handle its own events.
   button.addActionListener (new ActionListener(){
   @Override public void actionPerformed(ActionEvent ae) {
	   //button action: increase the number of clicks
	   ++clickCounter;
	   label_01.setText("Current Look and Feel: "+installedLF[++lfCounter].getName());
	   label_02.setText(labelText + clickCounter); 
	   //now perform another button action: switch to the new look and feel
       try {
         // set new look and feel
         UIManager.setLookAndFeel(installedLF[lfCounter].getClassName());
         // force all components to update their look and feel
         SwingUtilities.updateComponentTreeUI(SimpleSwingGUIe3.this);
       }catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e){
         //printStackTrace() is used only for debugging purposes. 
         //Normally an error dialog should be displayed here or the error must be logged.
         e.printStackTrace();
       }        
       if(lfCounter == lfMaxNumber) lfCounter= -1;     
      }
    });  
    return button;
   } 
/** 
  The main method.The GUI will start with the default Look and Feel - Metal Look and Feel 
  Runs the application GUI as a thread in the event queue.
  Anonymous class is used to create a runnable object.
  @param args not used
*/  
   public static void main(String[] args) {
     // Make all components to configured by the event dispatch thread.
     // This is the thread that passes user provoked events such as mouse clicks to 
     // the GUI components which have registered listeners for the events.
     // The following code fragment forces the statements in the run() method to be executed in the
     // event dispatch thread. 
     EventQueue.invokeLater(new Runnable()
         {
          @Override public void run()
            {
               JFrame frame = new JFrame(FRAME_TITLE);
               JPanel pane = new SimpleSwingGUIe3();
              // add the GUI panel to the JFrame content pane 
               frame.add(pane);            
               // set up the Close button (X) of the frame
               // no need to use explicitly a WindowListener. The line below will generate one for you. 
               // this frame method was introduced in Java 1.4
               frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               frame.pack();
               // no need - default action
               // frame.setLocationByPlatform(false); 
               // center the frame on the screen. This method was introduced in Java 1.7
               frame.setLocationRelativeTo(null); 
               // make the GUI visible
               frame.setVisible(true);	
            }
         });
     }
}
